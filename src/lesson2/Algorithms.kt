@file:Suppress("UNUSED_PARAMETER")

package lesson2

import java.io.File

/**
 * Получение наибольшей прибыли (она же -- поиск максимального подмассива)
 * Простая
 *
 * Во входном файле с именем inputName перечислены цены на акции компании в различные (возрастающие) моменты времени
 * (каждая цена идёт с новой строки). Цена -- это целое положительное число. Пример:
 *
 * 201
 * 196
 * 190
 * 198
 * 187
 * 194
 * 193
 * 185
 *
 * Выбрать два момента времени, первый из них для покупки акций, а второй для продажи, с тем, чтобы разница
 * между ценой продажи и ценой покупки была максимально большой. Второй момент должен быть раньше первого.
 * Вернуть пару из двух моментов.
 * Каждый момент обозначается целым числом -- номер строки во входном файле, нумерация с единицы.
 * Например, для приведённого выше файла результат должен быть Pair(3, 4)
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */
fun optimizeBuyAndSell(inputName: String): Pair<Int, Int> {
    val prices = mutableListOf<Int>()
    for (line in File(inputName).readLines()) {
        val number = line.toInt()
        if (number <= 0) throw NumberFormatException()
        prices.add(number)
    }
    if (prices.size == 0) throw NumberFormatException()
    val data = mutableListOf<Int>()
    // массив изменений цен
    for (i in 0 until (prices.size - 1)) {
        data.add(prices[i + 1] - prices[i])
    }
    // рекурсивное решение
    var maxBuy = 0
    var maxSell = 0
    var maxValue = 0
    var secondBuy = 0
    var secondValue = 0
    // secondBuy - день покупки, если день проажи - последний
    for (lastDay in 1 until (prices.size)) {
        val d = data[lastDay - 1]
        val p = secondValue + d
        if (p >= 0) secondValue = p
        else {
            secondBuy = lastDay
            secondValue = 0
        }
        if (maxValue < secondValue) {
            maxBuy = secondBuy
            maxSell = lastDay
            maxValue = secondValue
        }
    }
    return if (maxValue == 0) 0 to 0
    // В задании ничего не сказано о случае нулевой возможной прибыли.
    // Максимальная прибыль равна нулю при купле-продаже в один день (нулю), либо в дни,
    // между которыми цена не менялась. Принято решение возвращать в этом случае  0 to 0
    else maxBuy + 1 to maxSell + 1
    // В ответе строки файла нумеруются с 1
}
// Ресурсоемкость O(n)
// Трудоемкость O(n)

/**
 * Задача Иосифа Флафия.
 * Простая
 *
 * Образовав круг, стоят menNumber человек, пронумерованных от 1 до menNumber.
 *
 * 1 2 3
 * 8   4
 * 7 6 5
 *
 * Мы считаем от 1 до choiceInterval (например, до 5), начиная с 1-го человека по кругу.
 * Человек, на котором остановился счёт, выбывает.
 *
 * 1 2 3
 * 8   4
 * 7 6 х
 *
 * Далее счёт продолжается со следующего человека, также от 1 до choiceInterval.
 * Выбывшие при счёте пропускаются, и человек, на котором остановился счёт, выбывает.
 *
 * 1 х 3
 * 8   4
 * 7 6 Х
 *
 * Процедура повторяется, пока не останется один человек. Требуется вернуть его номер (в данном случае 3).
 *
 * 1 Х 3
 * х   4
 * 7 6 Х
 *
 * 1 Х 3
 * Х   4
 * х 6 Х
 *
 * х Х 3
 * Х   4
 * Х 6 Х
 *
 * Х Х 3
 * Х   х
 * Х 6 Х
 *
 * Х Х 3
 * Х   Х
 * Х х Х
 *
 * Общий комментарий: решение из Википедии для этой задачи принимается,
 * но приветствуется попытка решить её самостоятельно.
 */
fun josephTask(menNumber: Int, choiceInterval: Int): Int {
    TODO()
}

/**
 * Наибольшая общая подстрока.
 * Средняя
 *
 * Дано две строки, например ОБСЕРВАТОРИЯ и КОНСЕРВАТОРЫ.
 * Найти их самую длинную общую подстроку -- в примере это СЕРВАТОР.
 * Если общих подстрок нет, вернуть пустую строку.
 * При сравнении подстрок, регистр символов *имеет* значение.
 * Если имеется несколько самых длинных общих подстрок одной длины,
 * вернуть ту из них, которая встречается раньше в строке first.
 */
fun longestCommonSubstring(first: String, second: String): String {
    // Решение задачи с помощью динамического программирования.
    //   A B C D
    // A 1 0 0 0
    // C 0 0 1 0
    // D 0 0 0 2
    // B 0 1 0 0
    // Для эффективной ресурсоемкости храниться будут только значимые значения таблицы.
    // чтобы раньше встретилась та подстрока, которая раньше в first,
    // внешний перебор будет по строке first, а внутренний по second.
    val data = mutableMapOf<Int, Int>()
    // keys - индекс буквы в слове second
    // values - значение ячейки таблицы
    // ресурсоемкость в худшем случае O(second.length), O(n)
    var longestEndingIndex: Int? = null
    var longestLength = 0
    for (i in first.indices) {
        for (j in second.indices.reversed()) {
            if (first[i] == second[j]) { // буквы одинакоые?
                data[j] = (data[j - 1] ?: 0) + 1
                // значение "слева сверху" + 1
                if (data[j]!! > longestLength) {
                    longestEndingIndex = j
                    longestLength = data[j]!!
                }
            }
            data.remove(j - 1)
            // причина, по которой reversed()
        }
    }
    // трудоемкость O(first.length * second.length), O(n * n)
    return if (longestLength == 0) ""
    else second.substring(longestEndingIndex!! - longestLength + 1, longestEndingIndex + 1)
}

/**
 * Число простых чисел в интервале
 * Простая
 *
 * Рассчитать количество простых чисел в интервале от 1 до limit (включительно).
 * Если limit <= 1, вернуть результат 0.
 *
 * Справка: простым считается число, которое делится нацело только на 1 и на себя.
 * Единица простым числом не считается.
 */
fun calcPrimesNumber(limit: Int): Int {
    TODO()
}
